-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.note_params
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "IssueDate" date,
    "Side" character varying,
    "Notional" numeric,
    "Currency" character varying,
    "DayCountBasis" character varying,
    "ISIN" character varying,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.coupon_observation_dates
(
    "id_CouponObservationDates" bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "CouponObservationDate" date,
    "Coupon_TriggerType" character varying,
    "Coupon_TriggerLevel" numeric,
    "Note_id" bigint,
    PRIMARY KEY ("id_CouponObservationDates")
);

CREATE TABLE IF NOT EXISTS public.autocall_trigger_levels
(
    "id_Autocall_TriggerLevels" bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "Autocall_TriggerLevel" numeric,
    "Autocall_TriggerType" character varying,
    "CouponObservationDate_id" bigint,
    PRIMARY KEY ("id_Autocall_TriggerLevels")
);

CREATE TABLE IF NOT EXISTS public.equities
(
    "id_Equities" bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "Noted_id" bigint,
    "EquityName" character varying,
    "EquityInitialLevels" numeric,
    PRIMARY KEY ("id_Equities")
);

CREATE TABLE IF NOT EXISTS public.coupon_dates
(
    "id_CouponDates" bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "CouponObservationDate_id" bigint,
    "CouponDates" date,
    "Coupon_RatePerAnnum" numeric,
    "Coupon_GuaranteedPerAnnum" numeric,
    "Coupon_IsMemory" boolean,
    PRIMARY KEY ("id_CouponDates")
);

CREATE TABLE IF NOT EXISTS public.funding_dates
(
    "id_FundingDates" bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "Note_id" bigint,
    "FundingDate" date,
    "FundingRate" numeric,
    PRIMARY KEY ("id_FundingDates")
);

CREATE TABLE IF NOT EXISTS public."Prepayment"
(
    "id_Prepayment" bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "Note_id" bigint,
    "PrepaymentDate" date,
    "PrepaymentAmount" numeric,
    PRIMARY KEY ("id_Prepayment")
);

CREATE TABLE IF NOT EXISTS public.maturity_payoff
(
    "id_MaturityPayoff" bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "Note_id" bigint,
    "MaturityDate" date,
    "MaturityPayoff_Type" character varying,
    "MaturityPayoff_TriggerType" character varying,
    "MaturityPayoff_Strike" numeric,
    "MaturityPayoff_KnockInTriggerType" character varying,
    "MaturityPayoff_KnockInDirection" character varying,
    "MaturityPayoff_KnockInLevel" numeric,
    "MaturityPayoff_KnockOutTriggerType" character varying,
    "MaturityPayoff_KnockOutDirection" character varying,
    "MaturityPayoff_KnockOutLevel" numeric,
    "MaturityPayoff_BarrierPriority" character varying,
    "MaturityPayoff_Participation" numeric,
    "MaturityPayoff_CapitalProtection" numeric,
    PRIMARY KEY ("id_MaturityPayoff")
);

ALTER TABLE public.coupon_observation_dates
    ADD FOREIGN KEY ("Note_id")
    REFERENCES public.note_params (id)
    NOT VALID;


ALTER TABLE public.autocall_trigger_levels
    ADD FOREIGN KEY ("CouponObservationDate_id")
    REFERENCES public.coupon_observation_dates ("id_CouponObservationDates")
    NOT VALID;


ALTER TABLE public.equities
    ADD FOREIGN KEY ("Noted_id")
    REFERENCES public.note_params (id)
    NOT VALID;


ALTER TABLE public.funding_dates
    ADD FOREIGN KEY ("Note_id")
    REFERENCES public.note_params (id)
    NOT VALID;


ALTER TABLE public."Prepayment"
    ADD FOREIGN KEY ("Note_id")
    REFERENCES public.note_params (id)
    NOT VALID;


ALTER TABLE public.maturity_payoff
    ADD FOREIGN KEY ("Note_id")
    REFERENCES public.note_params (id)
    NOT VALID;


ALTER TABLE public.coupon_dates
    ADD FOREIGN KEY ("CouponObservationDate_id")
    REFERENCES public.coupon_observation_dates ("id_CouponObservationDates")
    NOT VALID;

END;